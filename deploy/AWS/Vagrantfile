# Create all the machines and docker containers needed to run the SafeHarbor server.
# This includes the Cesanta authorization server.

# For AWS, use ami-c7d092f7 (for Oregon, or ami-96a818fe for US East, or ami-6bcfc42e for N. Cal)
# https://aws.amazon.com/marketplace/ordering/ref=dtl_psb_continue?ie=UTF8&productId=b7ee8a69-ee97-4a49-9e68-afaee216db2e&region=us-west-2
# https://aws.amazon.com/marketplace/library/ref=mrc_prm_manage_subscriptions
# https://docs.docker.com/installation/centos/


....Customize this for AWS


@vmboxname = "Opscode centos-7.0"
@vmboxurl = "http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_centos-7.0_chef-provisionerless.box"

@CesantaPort = "5001"
@CesantaConfDir = "/home/vagrant/auth_server/config"
@CesantaSSLDir = "/home/vagrant/auth_server/ssl"
@CesantaServerName = "docker_auth"
@CesantaDockerImage = "cesanta/docker_auth"
@LocalPrivateKeyPath = "#{@CesantaServerName}.key"
@LocalPemPath = "#{@CesantaServerName}.pem"
@LocalCertPath = "#{@CesantaServerName}.crt"

@SafeHarborPort = "6000"
@SafeHarborDir = "/home/vagrant/safeharbor"
@SafeHarborServerName = "SafeHarbor"
@SafeHarborExecutable="SafeHarborServer"
@SafeHarborConfEnvVarName="SAFEHARBOR_CONFIGURATION_PATH"
@SafeHarborConfPath = "conf.json"
#@SafeHarborDockerImage = ....
#@SafeHarborPackageName= ....
#@SafeHarborExecPath="#{@SafeHarborDir}/....#{@SafeHarborPackageName}"

Vagrant.configure(2) do |config|

	# Configure the OS.
	config.vm.box = @vmboxname
	config.vm.box_url = @vmboxurl
	config.vm.hostname = "SafeHarborServer"
	#config.vm.network "private_network", ip: "192.168.50.4", virtualbox__intnet: "mynetwork"
	config.vm.network "forwarded_port", guest: @CesantaPort, host: @CesantaPort
	config.vm.network "forwarded_port", guest: @SafeHarborPort, host: @SafeHarborPort
	
	# Create directories needed for installing Cesanta.
	config.vm.provision "shell", inline: <<-SHELL
		if ! [ -d #{@CesantaConfDir} ]; then mkdir -p #{@CesantaConfDir}; fi
		if ! [ -d #{@CesantaSSLDir} ]; then mkdir -p #{@CesantaSSLDir}; fi
		sudo chown vagrant:vagrant #{@CesantaConfDir}
		sudo chown vagrant:vagrant #{@CesantaSSLDir}
	SHELL

	# Copy the Cesanta configuration file and credentials to the VM.
	config.vm.provision "file", source: "auth_config.yml", destination: "#{@CesantaConfDir}/auth_config.yml"
	config.vm.provision "file", source: @LocalPrivateKeyPath, destination: "#{@CesantaSSLDir}/#{@CesantaServerName}.key"
	config.vm.provision "file", source: @LocalPemPath, destination: "#{@CesantaSSLDir}/#{@CesantaServerName}.pem"
	
	# Create directories needed for installing SafeHarbor.
	config.vm.provision "shell", inline: <<-SHELL
		if ! [ -d #{@SafeHarborDir} ]; then mkdir -p #{@SafeHarborDir}; fi
		sudo chown vagrant:vagrant #{@SafeHarborDir}
	SHELL
	
	# Copy the SafeHarbor executable and config file.
	#config.vm.provision "file", source: @SafeHarborPackageName, destination: @SafeHarborDir
	#config.vm.provision "file", source: "conf.json", destination: @SafeHarborDir

	# Install patch needed by RHEL7/Centos7 to make the vagrant docker provisioner work.
#	config.vm.provision "shell", inline: <<-SHELL
		#yum-config-manager --enable ol7_addons
#		groupadd docker
#		usermod -a -G docker vagrant
#	SHELL

	# Install docker if needed and run the images for Cesanta and SafeHarbor.
#	config.vm.provision "docker" do |d|
		
		# Note: We should create a user account that is just for running SafeHarborServer,
		# with minimum capabilities, and remove other non-root accounts.
	
#		d.run @CesantaServerName, image: @CesantaDockerImage,
#			args: "-p #{@CesantaPort}:#{@CesantaPort} -v /var/log/docker_auth:/logs -v #{@CesantaConfDir}:/config:ro -v #{@CesantaSSLDir}:/ssl --restart=always",
#			cmd: "/config/auth_config.yml"
		
		#d.run @SafeHarborServerName, image: @SafeHarborDockerImage,
		#	args: "-p #{@SafeHarborPort}:#{@SafeHarborPort} -e #{@SafeHarborConfEnvVarName}=#{@SafeHarborConfPath}",
		#	cmd: "#{@SafeHarborExecPath}"
#	end

	# Install clair.
	config.vm.provision "shell", inline: <<-SHELL
		sudo docker pull quay.io/coreos/clair
		# To run clair:
		#sudo docker run -i -t -m 500M -v /tmp:/tmp -p 6060:6060 quay.io/coreos/clair:latest --db-type=bolt --db-path=/db/database
	SHELL
end
